Problem 1.	One-To-One Relationship 
Solution:
CREATE TABLE Passports (
PassportID INT PRIMARY KEY  NOT NULL ,
PassportNumber NVARCHAR(30)  NOT NULL UNIQUE
)

CREATE TABLE Persons(
PersonID  INT PRIMARY KEY IDENTITY, 
FirstName NVARCHAR(50) NOT NULL, 
Salary DECIMAL(15,2) NOT NULL, 
PassportID INT FOREIGN KEY REFERENCES Passports (PassportID)
)
 
INSERT INTO Passports (PassportID, PassportNumber) VALUES
(101, 'N34FG21B'),
(102, 'K65LO4R7'),
(103, 'ZE657QP2')
 
INSERT INTO Persons (FirstName, Salary, PassportID)  VALUES 
('Roberto', 43300.00, 102),
('Tom', 56100.00, 103),
('Yana', 60200.00, 101)

Problem 2.	One-To-Many Relationship
CREATE TABLE Manufacturers(
ManufacturerID INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL ,
EstablishedOn DATE NOT NULL
)

CREATE TABLE  Models (
ModelID INT PRIMARY KEY ,
[Name] NVARCHAR(30) NOT NULL, 
ManufacturerID INT FOREIGN KEY REFERENCES Manufacturers (Manufacturerid) 
)

INSERT INTO Manufacturers ([Name], EstablishedOn)  VALUES 
('BMW', '07/03/1916'),
('Tesla', '01/01/2003'),
('Lada', '01/05/1966')

INSERT INTO Models (ModelID, [Name], ManufacturerID) VALUES 
(101, 'X1', 1),
(102, 'i6', 1),
(103, 'Model S', 2),
(104, 'Model X', 2),
(105, 'Model 3', 3),
(106, 'Nova', 3)

Problem 3.	Many-To-Many Relationship
CREATE TABLE Students(
StudentID INT PRIMARY KEY IDENTITY, 
[Name] NVARCHAR(50) NOT NULL
)

CREATE TABLE Exams (
ExamID INT PRIMARY KEY NOT NULL,
[Name] NVARCHAR(50) NOT NULL
)

CREATE TABLE StudentsExams(
_  StudentID INT,_  ExamID INT,
  CONSTRAINT PK_StudentsExams
  PRIMARY KEY(StudentID, ExamID),
  CONSTRAINT FK_Students_StudentsId
  FOREIGN KEY(StudentID)
  REFERENCES Students(StudentID),
  CONSTRAINT FK_Exams_ExamsId
  FOREIGN KEY(ExamID)
  REFERENCES Exams(ExamID)
)


INSERT INTO Students([Name]) VALUES
('Mila'),
('Toni'),
('Ron')

INSERT INTO Exams (ExamID,[Name] ) VALUES 
(101, 'SpringMVC'), 
(102, 'Neo4j'), 
(103, 'Oracle 11g')

Problem 4.	Self-Referencing 
Solution:
CREATE TABLE Teachers (
TeacherID INT PRIMARY KEY NOT NULL ,
[Name] NVARCHAR(50) NOT NULL,
ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID)
)

INSERT INTO Teachers (TeacherID, [Name], ManagerID) VALUES
(101, 'John', NULL),
(102, 'Maya', 106),
(103, 'Silvia', 106),
(104, 'Ted', 105),
(105, 'Mark', 101),
(106, 'Greta', 101)
 
Problem 5.	Online Store Database
Solution:
CREATE TABLE Cities (
CityID INT PRIMARY KEY IDENTITY ,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Customers (
CustomerID INT PRIMARY KEY IDENTITY ,
[Name] VARCHAR(50) NOT NULL,
Birthday DATE NOT NULL, 
CityID INT FOREIGN KEY REFERENCES Cities (CityID)
)


CREATE TABLE Orders (
OrderID INT PRIMARY KEY IDENTITY, 
CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID)
)


CREATE TABLE ItemTypes (
ItemTypeID INT PRIMARY KEY IDENTITY, 
[Name] VARCHAR(50) NOT NULL,
)

CREATE TABLE Items(
ItemID INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(50) NOT NULL,
ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes (ItemTypeID)
)

CREATE TABLE OrderItems(
OrderID INT, 
ItemID INT,
CONSTRAINT PK_OrderItems
  PRIMARY KEY(OrderID, ItemID),
  CONSTRAINT FK_OrderItems_Orders
  FOREIGN KEY(OrderID)
  REFERENCES Orders(OrderID),
  CONSTRAINT FK_OrderItems_Items
  FOREIGN KEY(ItemID)
  REFERENCES Items(ItemID)
)

Problem 6.	University Database
Solution:
CREATE TABLE  Subjects(
SubjectID INT PRIMARY KEY IDENTITY, 
SubjectName NVARCHAR(30) NOT NULL
)

CREATE TABLE Majors (
MajorID INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL
)

CREATE TABLE Students (
StudentID INT PRIMARY KEY IDENTITY,
StudentNumber INT NOT NULL,
StudentName NVARCHAR(50) NOT NULL,
MajorID INT FOREIGN KEY REFERENCES Majors(MajorID) NOT NULL
)

CREATE TABLE Payments (
PaymentID INT PRIMARY KEY IDENTITY,
PaymentDate SMALLDATETIME NOT NULL, 
PaymentAmount DECIMAL(15,2) NOT NULL,
StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL
)

CREATE TABLE Agenda (
  StudentID INT,  SubjectID INT
  CONSTRAINT PK_StudentsSubjects
  PRIMARY KEY(StudentID, SubjectID),
  CONSTRAINT FK_Subjects_Students
  FOREIGN KEY(StudentID)
  REFERENCES Students(StudentID),
  CONSTRAINT FK_Students_Subjects
  FOREIGN KEY(SubjectID)
  REFERENCES Subjects(SubjectID)
)

Problem 7.	Peaks in Rila
SELECT m.MountainRange, p.PeakName, p.Elevation FROM Peaks AS p
JOIN Mountains AS  m
ON m.Id = p.MountainId
WHERE m.MountainRange = 'Rila'
ORDER BY p.Elevation DESC









